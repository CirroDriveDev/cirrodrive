// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../dist"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PricingPlan {
  FREE
  BASIC
  PREMIUM
}

enum FileStatus {
  ACTIVE
  TRASHED
  ARCHIVED
}

enum FilePermission {
  READ
  WRITE
  OWNER
}

model User {
  id                String      @id @default(cuid())
  // 사용자 정보
  username          String      @unique
  hashedPassword    String
  email             String      @unique
  pricingPlan       PricingPlan @default(FREE)
  usedStorage       Int         @default(0)
  profileImageUrl   String?     @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isAdmin           Boolean     @default(false)
  // 루트 디렉터리
  rootDirId         String      @unique
  rootDir           File        @relation(name: "UserRootDir", fields: [rootDirId], references: [id])
  // 세션
  sessions          Session[]
  // 소유한 파일/폴더
  fileEntries       File[]      @relation(name: "UserOwnedEntries")
  // 공유받은 항목
  sharedFileEntries FileShare[] @relation(name: "UserToFileShares")
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id         String          @id @default(cuid())
  // 소유자
  ownerId    String?
  owner      User?           @relation(name: "UserOwnedEntries", fields: [ownerId], references: [id])
  // 디렉터리 트리 구조
  parentId   String?
  parent     File?           @relation(name: "FileToChildren", fields: [parentId], references: [id])
  children   File[]          @relation(name: "FileToChildren")
  // 노드 정보
  name       String
  isDir      Boolean
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  // 파일 정보
  s3Key      String?
  size       Int?
  mimeType   String?
  hash       String?
  // 경로 정보
  fullPath   String
  // 상태
  status     FileStatus      @default(ACTIVE)
  trashedAt  DateTime?
  archivedAt DateTime?
  refCount   Int?            @default(1)
  // 공유 및 접근 코드
  sharedWith FileShare[]     @relation(name: "FileToFileShares")
  accessCode FileAccessCode? @relation(name: "FileToAccessCode")
  // 루트 디렉터리
  rootOwner  User?           @relation(name: "UserRootDir")

  // 제약 조건
  @@unique([fullPath, ownerId])
  // 인덱스
  @@index([ownerId])
  @@index([parentId])
  @@index([status])
  @@index([fullPath, ownerId])
}

model FileShare {
  id           String         @id @default(cuid())
  // 공유된 파일 항목
  fileId       String
  file         File           @relation(name: "FileToFileShares", fields: [fileId], references: [id])
  // 대상 사용자
  targetUserId String
  targetUser   User           @relation(name: "UserToFileShares", fields: [targetUserId], references: [id])
  // 권한
  permission   FilePermission
  // 만료일
  createdAt    DateTime       @default(now())
  expiresAt    DateTime?

  // 인덱스
  @@index([fileId])
  @@index([targetUserId])
}

model FileAccessCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expiresAt DateTime
  fileId    String   @unique
  file      File     @relation(name: "FileToAccessCode", fields: [fileId], references: [id])
}

model VerificationCode {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
}
