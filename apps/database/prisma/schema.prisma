// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../dist"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PricingPlan {
  free
  basic
  premium
}

enum BillingStatus {
  ACTIVE
  CANCELED
}

enum CardType {
  CREDIT
  DEBIT
}

enum CardOwnerType {
  PERSONAL
  CORPORATE
}

model User {
  id              String      @id @default(uuid())
  username        String      @unique
  hashedPassword  String
  email           String      @unique
  pricingPlan     PricingPlan @default(free)
  usedStorage     Int         @default(0)
  profileImageUrl String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isAdmin         Boolean     @default(false)

  rootFolderId String @unique
  rootFolder   Folder @relation(name: "RootFolder", fields: [rootFolderId], references: [id], onDelete: Cascade)

  trashFolderId String @unique
  trashFolder   Folder @relation(name: "TrashFolder", fields: [trashFolderId], references: [id], onDelete: Cascade)

  sessions         Session[]
  folders          Folder[]           @relation(name: "OwnerToFolder")
  files            FileMetadata[]
  BillingAgreement BillingAgreement[]
}

model Session {
  id        String   @id
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FileMetadata {
  id        String    @id @default(uuid())
  name      String
  extension String
  size      Int
  key       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  trashedAt DateTime?
  hash      String

  parentFolderId  String?
  parentFolder    Folder? @relation(fields: [parentFolderId], references: [id], onDelete: SetNull)
  restoreFolderId String?
  restoreFolder   Folder? @relation(name: "RestoreFolderToFile", fields: [restoreFolderId], references: [id], onDelete: SetNull)
  ownerId         String?
  owner           User?   @relation(fields: [ownerId], references: [id])

  codes FileAccessCode? @relation(name: "FileToAccessCode")

  @@index([parentFolderId])
}

model FileAccessCode {
  id        Int          @id @default(autoincrement())
  code      String       @unique
  expiresAt DateTime
  fileId    String       @unique
  file      FileMetadata @relation(name: "FileToAccessCode", fields: [fileId], references: [id])
}

model VerificationCode {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Folder {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  trashedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt

  parentFolderId  String?
  parentFolder    Folder? @relation(name: "ParentToSubFolder", fields: [parentFolderId], references: [id])
  restoreFolderId String?
  restoreFolder   Folder? @relation(name: "RestoreFolderToFolder", fields: [restoreFolderId], references: [id])
  ownerId         String?
  owner           User?   @relation(name: "OwnerToFolder", fields: [ownerId], references: [id], onDelete: SetNull)

  subFolders             Folder[]       @relation(name: "ParentToSubFolder")
  files                  FileMetadata[]
  UserRootFolder         User?          @relation(name: "RootFolder")
  UserTrashFolder        User?          @relation(name: "TrashFolder")
  restoredFolderToFolder Folder[]       @relation(name: "RestoreFolderToFolder")
  restoredFolderToFile   FileMetadata[] @relation(name: "RestoreFolderToFile")

  @@index([parentFolderId])
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
}

model BillingAgreement {
  id               String        @id @default(uuid())
  userId           String
  customerKey      String        @unique
  billingKey       String        @unique
  cardCompany      String
  cardNumberMasked String
  cardType         CardType
  cardOwnerType    CardOwnerType
  authenticatedAt  DateTime
  status           BillingStatus
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  // 관계
  user             User          @relation(fields: [userId], references: [id])
}
