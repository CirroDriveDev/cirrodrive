// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../dist"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PricingPlan {
  free
  basic
  premium
}

model User {
  id              Int         @id @default(autoincrement())
  username        String      @unique
  hashedPassword  String
  email           String      @unique
  pricingPlan     PricingPlan @default(free)
  usedStorage     Int         @default(0)
  profileImageUrl String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sessions        Session[]
  drives          Drive[]
  folders         Folder[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Drive {
  id        Int      @id @default(autoincrement())
  userId    Int
  totalSize Int
  usedSize  Int      @default(0)
  files     File[]
  folders   Folder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model File {
  id        Int       @id @default(autoincrement())
  driveId   Int
  folderId  Int?
  name      String
  extension String
  size      Int
  savedPath String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  trashedAt DateTime?
  hash      String
  codes     Code[]    @relation("FileCodes")
  drive     Drive     @relation(fields: [driveId], references: [id], onDelete: Cascade)
  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)

  @@index([driveId, folderId])
}

model Code {
  id         Int      @id @default(autoincrement())
  codeString String   @unique
  fileId     Int
  expiresAt  DateTime
  file       File     @relation("FileCodes", fields: [fileId], references: [id])
}

model Folder {
  id        Int      @id @default(autoincrement())
  driveId   Int
  parentId  Int?
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  drive     Drive    @relation(fields: [driveId], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderToFolder")
  files     File[]
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?

  @@index([driveId, parentId])
}
