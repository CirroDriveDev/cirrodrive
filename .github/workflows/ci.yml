name: CI Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - ".github/workflows/**"
      - ".github/actions/**"
      - "**/src/**"
      - "**/test/**"
      - "**/package.json"
      - "**/tsconfig.json"
      - "**/vitest.config.*"
      - "**/.env*"
      - "env/**"
      - "compose.yaml"
      - "vitest.config.ts"
      - ".nvmrc"
      - ".npmrc"
      - ".devcontainer/**"
      - "**/.nvmrc"
      - "**/.npmrc"
      - "**/.prettier*"
      - "**/.eslintrc*"
      - "**/.lintstagedrc*"
      - "eslint.config.js"
      - "pnpm-workspace.yaml"
      - "turbo.json"
      - "pnpm-lock.yaml"
  workflow_dispatch:

jobs:
  lint:
    name: CI (Lint)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore eslint cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/.eslintcache"
          key: eslint-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', '**/eslint.config.js') }}
          restore-keys: |
            eslint-${{ runner.os }}-

      - name: Run lint
        run: pnpm lint

  typecheck:
    name: CI (TypeCheck)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore typecheck cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/tsbuildinfo.json"
          key: typecheck-${{ runner.os }}-${{ hashFiles('**/tsconfig.json', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            typecheck-${{ runner.os }}-

      - name: Run typecheck
        run: pnpm typecheck

  test:
    name: CI (Test)
    runs-on: ubuntu-22.04
    env:
      # 백엔드
      APP_SERVER_PORT: 4000
      APP_CLIENT_PORT: 5173
      APP_PUBLIC_HOST: localhost
      DATABASE_URL: mysql://mariadb:mariadb@localhost:3306/mariadb-test
      AUTH_JWT_SECRET: test-secret
      AUTH_DEFAULT_ADMIN_USERNAME: admin
      AUTH_DEFAULT_ADMIN_PASSWORD: secure-password
      AWS_REGION: ap-northeast-2
      AWS_SES_SOURCE_EMAIL: your-verified-email@example.com
      AWS_S3_BUCKET: test-bucket
      AWS_S3_ACCESS_KEY: minioadmin
      AWS_S3_SECRET_KEY: minioadmin
      AWS_S3_ENDPOINT: http://minio:9000
      PAYMENT_TOSS_SECRET_KEY: your-toss-secret-key
      # 프론트엔드
      VITE_API_HOST: localhost
      VITE_API_PORT: 4000
      VITE_TOSS_CLIENT_KEY: test_ck_D5GePWvyJnrK0W0k6q8gLzN97Eoq
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore test cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/vitest-report.json"
          key: test-${{ runner.os }}-${{ hashFiles('**/vitest.config.ts', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            test-${{ runner.os }}-

      - name: Start compose services
        run: docker compose -f docker-compose-ci.yml up -d

      - name: Wait for MariaDB healthcheck
        run: |
          for i in {1..30}; do
            status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose -f docker-compose-ci.yml ps -q db))
            echo "MariaDB health status: $status"
            if [ "$status" = "healthy" ]; then
              echo "MariaDB is healthy!"
              exit 0
            fi
            sleep 2
          done
          echo "MariaDB did not become healthy in time" && exit 1

      - name: Run tests
        run: pnpm test:ci

  notify:
    name: Notify Discord
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test]
    if: always()
    steps:
      - name: Notify discord (lint)
        if: ${{ needs.lint.result == 'failure' }}
        uses: th0th/notify-discord@v0.4.1
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_JOB_NAME: "CI (Lint) 실패"
          GITHUB_JOB_STATUS: "failure"

      - name: Notify discord (typecheck)
        if: ${{ needs.typecheck.result == 'failure' }}
        uses: th0th/notify-discord@v0.4.1
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_JOB_NAME: "CI (TypeCheck) 실패"
          GITHUB_JOB_STATUS: "failure"

      - name: Notify discord (test)
        if: ${{ needs.test.result == 'failure' }}
        uses: th0th/notify-discord@v0.4.1
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_JOB_NAME: "CI (Test) 실패"
          GITHUB_JOB_STATUS: "failure"
