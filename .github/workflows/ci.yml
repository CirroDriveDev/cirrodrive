name: CI Pipeline

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: CI (Lint)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore eslint cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/.eslintcache"
          key: eslint-${{ runner.os }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', '**/eslint.config.js') }}
          restore-keys: |
            eslint-${{ runner.os }}-

      - name: Run lint
        run: pnpm lint

  typecheck:
    name: CI (TypeCheck)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore typecheck cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/tsbuildinfo.json"
          key: typecheck-${{ runner.os }}-${{ hashFiles('**/tsconfig.json', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            typecheck-${{ runner.os }}-

      - name: Run typecheck
        run: pnpm typecheck

  test:
    name: CI (Test)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node, pnpm, turbo cache, and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore test cache
        uses: actions/cache@v4
        with:
          path: "**/.cache/vitest-report.json"
          key: test-${{ runner.os }}-${{ hashFiles('**/vitest.config.ts', '**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            test-${{ runner.os }}-

      - name: Start compose services
        run: pnpm dev:mock:up

      - name: Run tests
        run: pnpm test:ci

  notify-success:
    name: Notify Success
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test]
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get commit info
        id: commit-info
        run: |
          echo "commit_sha=$(git log -1 --pretty=%h)" >> $GITHUB_OUTPUT

      - name: Get test details
        id: test-details
        run: |
          # 현재 시간 (KST)
          NOW=$(TZ=Asia/Seoul date +"%Y-%m-%d %H:%M:%S %Z")
          echo "test_time=$NOW" >> $GITHUB_OUTPUT
          echo "workflow_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Notify Discord Success
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: success
          title: "✅ CI 테스트 성공"
          description: |
            **환경:** CI
            **테스트 시간:** ${{ steps.test-details.outputs.test_time }}
            **브랜치:** ${{ github.ref_name }}
            **커밋:** [${{ steps.commit-info.outputs.commit_sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          color: 3066993
          url: ${{ steps.test-details.outputs.workflow_url }}
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-22.04
    needs: [lint, typecheck, test]
    if: always() && failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get commit info
        id: commit-info
        run: |
          echo "commit_sha=$(git log -1 --pretty=%h)" >> $GITHUB_OUTPUT

      - name: Get test details
        id: test-details
        run: |
          # 현재 시간 (KST)
          NOW=$(TZ=Asia/Seoul date +"%Y-%m-%d %H:%M:%S %Z")
          echo "test_time=$NOW" >> $GITHUB_OUTPUT
          echo "workflow_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Get failure jobs
        id: failure-jobs
        run: |
          FAILURES=""
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            FAILURES="${FAILURES}* Lint\n"
          fi
          if [[ "${{ needs.typecheck.result }}" == "failure" ]]; then
            FAILURES="${FAILURES}* TypeCheck\n"
          fi
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            FAILURES="${FAILURES}* Tests\n"
          fi
          echo "failures=${FAILURES}" >> $GITHUB_OUTPUT

      - name: Notify Discord Failure
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          content: "@here CI 테스트에 실패했습니다! 확인이 필요합니다."
          title: "❌ CI 테스트 실패"
          description: |
            **환경:** CI
            **테스트 시간:** ${{ steps.test-details.outputs.test_time }}
            **브랜치:** ${{ github.ref_name }}
            **커밋:** [${{ steps.commit-info.outputs.commit_sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})

            **실패한 작업:**
            ${{ steps.failure-jobs.outputs.failures }}
          color: 15158332
          url: ${{ steps.test-details.outputs.workflow_url }}
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
